(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{112:function(e,n,i){"use strict";i.r(n),i.d(n,"frontMatter",(function(){return l})),i.d(n,"metadata",(function(){return r})),i.d(n,"toc",(function(){return o})),i.d(n,"default",(function(){return m}));var t=i(3),a=i(7),p=(i(0),i(158)),l={id:"desktop-plugin-structure",title:"Plugin structure"},r={unversionedId:"extending/desktop-plugin-structure",id:"extending/desktop-plugin-structure",isDocsHomePage:!1,title:"Plugin structure",description:"Flipper Desktop plugins have a rigid structure. We recommend to scaffold any new plugin using our scaffolding tooling.",source:"@site/../docs/extending/desktop-plugin-structure.mdx",slug:"/extending/desktop-plugin-structure",permalink:"/docs/extending/desktop-plugin-structure",editUrl:"https://github.com/facebook/flipper/blob/master/website/../docs/extending/desktop-plugin-structure.mdx",version:"current",sidebar:"extending",previous:{title:"Dynamically Loading Plugins",permalink:"/docs/extending/loading-custom-plugins"},next:{title:"Testing",permalink:"/docs/extending/testing"}},o=[{value:"Scaffolding a new plugin",id:"scaffolding-a-new-plugin",children:[{value:"flipper-pkg",id:"flipper-pkg",children:[]},{value:"scarf flipper-plugin",id:"scarf-flipper-plugin",children:[]}]},{value:"Desktop Plugin structure",id:"desktop-plugin-structure",children:[]},{value:"Anatomy of a Desktop plugin",id:"anatomy-of-a-desktop-plugin",children:[{value:"Creating a Client Plugin",id:"creating-a-client-plugin",children:[]},{value:"Creating a Device Plugin",id:"creating-a-device-plugin",children:[]},{value:"Creating a simple table plugin",id:"creating-a-simple-table-plugin",children:[]}]},{value:"Validation",id:"validation",children:[]},{value:"Transpilation and bundling",id:"transpilation-and-bundling",children:[]},{value:"npm dependencies",id:"npm-dependencies",children:[]},{value:"Migration to new Plugin Specification",id:"migration-to-new-plugin-specification",children:[]},{value:"Adding fb-only code to open-sourced plugins",id:"adding-fb-only-code-to-open-sourced-plugins",children:[]}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(p.b)("div",n)}},s=c("OssOnly"),u=c("FbInternalOnly"),d=c("FbNpmDeps"),b=c("FbOnlyParts"),g={toc:o};function m(e){var n=e.components,i=Object(a.a)(e,["components"]);return Object(p.b)("wrapper",Object(t.a)({},g,i,{components:n,mdxType:"MDXLayout"}),Object(p.b)("p",null,"Flipper Desktop plugins have a rigid structure. We recommend to scaffold any new plugin using our scaffolding tooling."),Object(p.b)("h2",{id:"scaffolding-a-new-plugin"},"Scaffolding a new plugin"),Object(p.b)(s,{mdxType:"OssOnly"},Object(p.b)("h3",{id:"flipper-pkg"},"flipper-pkg"),Object(p.b)("p",null,"The CLI tool ",Object(p.b)("inlineCode",{parentName:"p"},"flipper-pkg")," helps to initialize, validate, and package Flipper desktop plugins."),Object(p.b)("p",null,"To scaffold a new plugin run ",Object(p.b)("inlineCode",{parentName:"p"},"npx flipper-pkg init")," in the directory where you want to store the plugin sources.\nNote that this should typically ",Object(p.b)("em",{parentName:"p"},"not")," be inside a Flipper checkout, but rather a fresh directory which you can put under your own source control.")),Object(p.b)(u,{mdxType:"FbInternalOnly"},Object(p.b)("h3",{id:"scarf-flipper-plugin"},"scarf flipper-plugin"),Object(p.b)("p",null,"On a FB machine, new plugins can be scaffolded by running ",Object(p.b)("inlineCode",{parentName:"p"},"scarf flipper-plugin"),".\nThis takes care of both the Desktop and Client side setup of plugins.\nFollow the instructions offered by scarf.")),Object(p.b)("h2",{id:"desktop-plugin-structure"},"Desktop Plugin structure"),Object(p.b)("p",null,"All Flipper Desktop plugins must be self-contained in a directory. This directory must contain at a minimum package.json and entry source file, e.g.:"),Object(p.b)("ul",null,Object(p.b)("li",{parentName:"ul"},"package.json"),Object(p.b)("li",{parentName:"ul"},"src/index.tsx")),Object(p.b)("p",null,"After scaffolding a new plugin has finished, you should have files ",Object(p.b)("inlineCode",{parentName:"p"},"package.json")," and ",Object(p.b)("inlineCode",{parentName:"p"},"src/index.tsx")," files in the directory. The first file is the plugin package manifest and the second is the entry point to your plugin. An example ",Object(p.b)("inlineCode",{parentName:"p"},"package.json")," file could look like this:"),Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre",className:"language-json"},'{\n  "$schema": "https://fbflipper.com/schemas/plugin-package/v2.json",\n  "name": "flipper-plugin-myplugin",\n  "id": "myplugin",\n  "pluginType": "client",\n  "version": "1.0.0",\n  "main": "dist/bundle.js",\n  "flipperBundlerEntry": "src/index.tsx",\n  "license": "MIT",\n  "keywords": ["flipper-plugin"],\n  "title": "My Plugin",\n  "icon": "apps",\n  "bugs": {\n    "email": "you@example.com"\n  },\n  "scripts": {\n    "lint": "flipper-pkg lint",\n    "prepack": "flipper-pkg lint && flipper-pkg bundle"\n  },\n  "peerDependencies": {\n    "flipper": "latest",\n    "flipper-plugin": "latest"\n  },\n  "devDependencies": {\n    "flipper": "latest",\n    "flipper-plugin": "latest",\n    "flipper-pkg": "latest",\n    "react": "latest",\n    "antd": "latest\n  }\n}\n')),Object(p.b)("p",null,"Important attributes of ",Object(p.b)("inlineCode",{parentName:"p"},"package.json"),":"),Object(p.b)("ul",null,Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("inlineCode",{parentName:"p"},"$schema")," must contain URI identifying scheme according to which the plugin is defined. Currently, Flipper supports plugins defined by the specification version 2 (",Object(p.b)("a",{parentName:"p",href:"https://fbflipper.com/schemas/plugin-package/v2.json"},"https://fbflipper.com/schemas/plugin-package/v2.json"),"), while version 1 is being deprecated.")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("inlineCode",{parentName:"p"},"name")," Npm package name. Should start with ",Object(p.b)("inlineCode",{parentName:"p"},"flipper-plugin-")," by convention, so Flipper plugins can be easily found on npm.")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("inlineCode",{parentName:"p"},"id")," Used as the plugin native identifier and ",Object(p.b)("strong",{parentName:"p"},"must match the mobile plugin identifier"),", e.g. returned by ",Object(p.b)("inlineCode",{parentName:"p"},"getId")," method of your Java plugin.")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("inlineCode",{parentName:"p"},"pluginType")," Specifies type of the plugin - client or device. See section ",Object(p.b)("a",{parentName:"p",href:"#anatomy-of-a-desktop-plugin"},"Anatomy of a Desktop plugin")," for details.")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("inlineCode",{parentName:"p"},"main"),' Points to the plugin bundle which will be loaded by Flipper. The "flipper-pkg" utility uses this field to determine output location during plugin bundling.')),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("inlineCode",{parentName:"p"},"flipperBundlerEntry"),' Points to the source entry point which will be used for plugin code bundling. "flipper-pkg" takes the path specified in ',Object(p.b)("inlineCode",{parentName:"p"},"flipperBundlerEntry")," as source, transpiles and bundles it, and saves the output to the path specified in ",Object(p.b)("inlineCode",{parentName:"p"},"main"),".")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("inlineCode",{parentName:"p"},"keywords")," The field must contain the ",Object(p.b)("inlineCode",{parentName:"p"},"flipper-plugin")," keyword, otherwise Flipper won't discover the plugin. Additionally, the field can also contain any other keywords for better plugin discoverability.")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("inlineCode",{parentName:"p"},"title")," Shown in the main sidebar as the human-readable name of the plugin.")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("inlineCode",{parentName:"p"},"icon")," Determines the plugin icon which is displayed in the main sidebar. The list of available icons is static for now: ",Object(p.b)("a",{parentName:"p",href:"https://github.com/facebook/flipper/blob/master/desktop/static/icons.json"},"https://github.com/facebook/flipper/blob/master/desktop/static/icons.json"),".")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("inlineCode",{parentName:"p"},"bugs")," Specify an email and/or url, where plugin bugs should be reported."))),Object(p.b)("p",null,"In ",Object(p.b)("inlineCode",{parentName:"p"},"index.tsx")," you will define the plugin in JavaScript."),Object(p.b)("p",null,"Example ",Object(p.b)("inlineCode",{parentName:"p"},"index.tsx"),":"),Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre",className:"language-js"},"export function plugin(client) {\n  return {};\n}\n\nexport function Component() {\n  return 'hello world';\n}\n")),Object(p.b)("p",null,"Some public plugins will use a ",Object(p.b)("inlineCode",{parentName:"p"},"FlipperPlugin")," base class. This format is deprecated but the documentation can still be found ",Object(p.b)("a",{parentName:"p",href:"/docs/extending/js-plugin-api"},"here"),"."),Object(p.b)("h2",{id:"anatomy-of-a-desktop-plugin"},"Anatomy of a Desktop plugin"),Object(p.b)("p",null,"Flipper Desktop plugins come in three possible flavors:"),Object(p.b)("ol",null,Object(p.b)("li",{parentName:"ol"},"Client plugins: A plugin that connects to a specific client plugin running in an app (recommended)"),Object(p.b)("li",{parentName:"ol"},"Device plugins: A plugin that doesn't connect to a specific client and doesn't have a native counter part, but rather shows data about the device obtained through some other means, like device logs, device temperatures, etc."),Object(p.b)("li",{parentName:"ol"},"Table plugin: A simplified version of a client plugin, that merely displays incoming data from a client plugin in a table.")),Object(p.b)("h3",{id:"creating-a-client-plugin"},"Creating a Client Plugin"),Object(p.b)("p",null,"A plugin always exposes two elements from its entry module (typically ",Object(p.b)("inlineCode",{parentName:"p"},"src/index.tsx"),"): ",Object(p.b)("inlineCode",{parentName:"p"},"plugin")," and ",Object(p.b)("inlineCode",{parentName:"p"},"Component"),":"),Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre",className:"language-tsx"},"import {PluginClient} from 'flipper-plugin';\n\nexport function plugin(client: PluginClient) {\n  return {}; // API exposed from this plugin\n}\n\nexport function Component() {\n  // Plugin UI\n  return <h1>Welcome to my first plugin</h1>;\n}\n")),Object(p.b)("p",null,"A further guide on how to write custom Flipper plugins can be found here: ",Object(p.b)("a",{parentName:"p",href:"../tutorial/js-custom"},"tutorial"),"."),Object(p.b)("h3",{id:"creating-a-device-plugin"},"Creating a Device Plugin"),Object(p.b)("p",null,"Flipper also supports so-called device plugins - plugins that are available for an entire device - but don't receive a connection to a running app,\nso are a bit more limited in general.\nTheir entry module anatomy is:"),Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre",className:"language-tsx"},"import {DevicePluginClient} from 'flipper-plugin';\n\nexport function devicePlugin(client: DevicePluginClient) {\n  return {}; // API exposed from this plugin\n}\n\nexport function Component() {\n  // Plugin UI\n  return <h1>Welcome to my first plugin</h1>;\n}\n")),Object(p.b)("p",null,"Desktop plugins must have the property ",Object(p.b)("inlineCode",{parentName:"p"},"pluginType")," set to ",Object(p.b)("inlineCode",{parentName:"p"},"device")," in their package.json. They should also specify supported devices using property ",Object(p.b)("inlineCode",{parentName:"p"},"supportedDevices"),"\nin package.json. The property should contain an array of supported devices each defined as conjunction of device properties in the following format:\n",Object(p.b)("inlineCode",{parentName:"p"},'{ "os": <"Android" | "iOS" | "Metro">, "type": <"physical" | "emulator">, "archived": <true | false> }'),". For example: ",Object(p.b)("inlineCode",{parentName:"p"},'{ "os": "Android", "type": "emulator" }')," means\nthat device must work on Android AND must be an emulator in order to debug it using the plugin.\nTo specify that plugin supports all types of Android devices, and physical iOS devices, and does not support imported (archived) data, the plugin package.json should look like that:"),Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre",className:"language-json"},'{\n  "$schema": "https://fbflipper.com/schemas/plugin-package/v2.json",\n  "name": "flipper-plugin-mydeviceplugin",\n  "id": "mydeviceplugin",\n  "pluginType": "device",\n  "supportedDevices": [\n    {"os": "Android", "archived": false},\n    {"os": "iOS", "type": "physical", "archived": false}\n  ]\n...\n}\n')),Object(p.b)("p",null,"Device plugins work in general similar to normal client plugins, so aren't worked out in detail in this document.\nThe available APIs for device plugins are listed ",Object(p.b)("a",{parentName:"p",href:"./flipper-plugin#devicepluginclient"},"here"),"."),Object(p.b)("h3",{id:"creating-a-simple-table-plugin"},"Creating a simple table plugin"),Object(p.b)("p",null,"Flipper provides a standard abstraction to render data received from a Client plugin in a table, see ",Object(p.b)("a",{parentName:"p",href:"./create-table-plugin"},"creating a table plugin"),"."),Object(p.b)("h2",{id:"validation"},"Validation"),Object(p.b)(s,{mdxType:"OssOnly"},Object(p.b)("p",null,"Plugin definition can be validated using command ",Object(p.b)("inlineCode",{parentName:"p"},"flipper-pkg lint"),". The command shows all the mismatches which should be fixed to make plugin definition valid.")),Object(p.b)(u,{mdxType:"FbInternalOnly"},Object(p.b)("p",null,"Make sure to address any lint errors shown in the IDE or surfaced on phabricator.\nTo manually run the linter run ",Object(p.b)("inlineCode",{parentName:"p"},"yarn lint")," in ",Object(p.b)("inlineCode",{parentName:"p"},"~/fbsource/xplat/sonar/desktop"),".")),Object(p.b)(s,{mdxType:"OssOnly"},Object(p.b)("h2",{id:"transpilation-and-bundling"},"Transpilation and bundling"),Object(p.b)("p",null,"Flipper has ",Object(p.b)("a",{parentName:"p",href:"#transpiling-and-bundling"},"tooling for transpiling and bundling")," which allows writing plugins in plain ES6 JavaScript or ",Object(p.b)("a",{parentName:"p",href:"https://www.typescriptlang.org/"},"TypeScript"),".\nWe recommend you use ",Object(p.b)("strong",{parentName:"p"},"TypeScript")," for the best development experience. We also recommend you use the file extension ",Object(p.b)("inlineCode",{parentName:"p"},".tsx")," when using TypeScript which adds support for inline React expressions."),Object(p.b)("p",null,"As we already mentioned, the ",Object(p.b)("a",{parentName:"p",href:"#development-build"},"Flipper development build")," automatically transpiles and bundles plugins on loading. It is capable of all the ES6 goodness, Flow annotations, TypeScript, as well as JSX and applies the required babel-transforms."),Object(p.b)("p",null,"The Flipper release build, in contrast, does not transpile or bundle plugins on loading. For production usage, plugins should be ",Object(p.b)("a",{parentName:"p",href:"#packaging-and-publishing"},"bundled before publishing")," using ",Object(p.b)("a",{parentName:"p",href:"https://classic.yarnpkg.com/en/package/flipper-pkg"},"flipper-pkg"),". This utility applies the same modifications as the plugin loader of the development build."),Object(p.b)("p",null,"The ",Object(p.b)("inlineCode",{parentName:"p"},"flipper-pkg")," tool is published to npm and should be installed as a ",Object(p.b)("inlineCode",{parentName:"p"},"devDependency")," for the plugin package."),Object(p.b)("p",null,"Then, to bundle the plugin, execute the following command in its folder:"),Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre"},"yarn flipper-pkg bundle\n")),Object(p.b)("p",null,"This command reads the ",Object(p.b)("inlineCode",{parentName:"p"},"package.json"),", takes the path specified in the ",Object(p.b)("inlineCode",{parentName:"p"},"flipperBundleEntry")," field as entry point, transpiles and bundles all the required code, and outputs the produced bundle to the path specified in field ",Object(p.b)("inlineCode",{parentName:"p"},"main"),"."),Object(p.b)("p",null,"You can get the list of other available commands by invoking ",Object(p.b)("inlineCode",{parentName:"p"},"flipper-pkg help"),", and get detailed description for any command by invoking ",Object(p.b)("inlineCode",{parentName:"p"},"flipper-pkg help [COMMAND]"),". You can also check README on npmjs.com for usage details: ",Object(p.b)("a",{parentName:"p",href:"https://www.npmjs.com/package/flipper-pkg"},"https://www.npmjs.com/package/flipper-pkg"),".")),Object(p.b)("h2",{id:"npm-dependencies"},"npm dependencies"),Object(p.b)(s,{mdxType:"OssOnly"},Object(p.b)("p",null,"If you need any dependencies in your plugin, you can install them using ",Object(p.b)("inlineCode",{parentName:"p"},"yarn add"),".")),Object(p.b)(d,{mdxType:"FbNpmDeps"}),Object(p.b)(s,{mdxType:"OssOnly"},Object(p.b)("h2",{id:"migration-to-new-plugin-specification"},"Migration to new Plugin Specification"),Object(p.b)("p",null,"Flipper plugins are defined according to the specification. As with any specification, it is evolving, so new versions of it can be released. Currently Flipper supports plugins defined using version 2 of specification which is described in this page. Previous version of specification is being deprecated, and we encourage all the plugins still using it to migrate."),Object(p.b)("p",null,"The main difference of version 2 is that plugins are transpiled and bundled before packaging, while in version 1 this was done in run-time on plugin installation. There are no plugin API changes, so only the ",Object(p.b)("inlineCode",{parentName:"p"},"package.json")," changes are required to migrate."),Object(p.b)("p",null,"The easiest way for migration is using of command ",Object(p.b)("inlineCode",{parentName:"p"},"flipper-pkg migrate"),". It will automatically migrate your plugin definition to the latest version.")),Object(p.b)(u,{mdxType:"FbInternalOnly"},Object(p.b)("h2",{id:"adding-fb-only-code-to-open-sourced-plugins"},"Adding fb-only code to open-sourced plugins"),Object(p.b)(b,{mdxType:"FbOnlyParts"})))}m.isMDXComponent=!0},158:function(e,n,i){"use strict";i.d(n,"a",(function(){return u})),i.d(n,"b",(function(){return g}));var t=i(0),a=i.n(t);function p(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function l(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,t)}return i}function r(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?l(Object(i),!0).forEach((function(n){p(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):l(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function o(e,n){if(null==e)return{};var i,t,a=function(e,n){if(null==e)return{};var i,t,a={},p=Object.keys(e);for(t=0;t<p.length;t++)i=p[t],n.indexOf(i)>=0||(a[i]=e[i]);return a}(e,n);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(t=0;t<p.length;t++)i=p[t],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var c=a.a.createContext({}),s=function(e){var n=a.a.useContext(c),i=n;return e&&(i="function"==typeof e?e(n):r(r({},n),e)),i},u=function(e){var n=s(e.components);return a.a.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},b=a.a.forwardRef((function(e,n){var i=e.components,t=e.mdxType,p=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=s(i),b=t,g=u["".concat(l,".").concat(b)]||u[b]||d[b]||p;return i?a.a.createElement(g,r(r({ref:n},c),{},{components:i})):a.a.createElement(g,r({ref:n},c))}));function g(e,n){var i=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var p=i.length,l=new Array(p);l[0]=b;var r={};for(var o in n)hasOwnProperty.call(n,o)&&(r[o]=n[o]);r.originalType=e,r.mdxType="string"==typeof e?e:t,l[1]=r;for(var c=2;c<p;c++)l[c]=i[c];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,i)}b.displayName="MDXCreateElement"}}]);