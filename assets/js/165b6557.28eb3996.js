(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{158:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return m}));var i=t(0),a=t.n(i);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=a.a.createContext({}),s=function(e){var n=a.a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=s(e.components);return a.a.createElement(u.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},b=a.a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=s(t),b=i,m=p["".concat(o,".").concat(b)]||p[b]||d[b]||r;return t?a.a.createElement(m,l(l({ref:n},u),{},{components:t})):a.a.createElement(m,l({ref:n},u))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=b;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var u=2;u<r;u++)o[u]=t[u];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},159:function(e,n,t){"use strict";t.d(n,"b",(function(){return r})),t.d(n,"a",(function(){return o}));var i=t(10),a=t(160);function r(){var e=Object(i.default)().siteConfig,n=(e=void 0===e?{}:e).baseUrl,t=void 0===n?"/":n,r=e.url;return{withBaseUrl:function(e,n){return function(e,n,t,i){var r=void 0===i?{}:i,o=r.forcePrependBaseUrl,l=void 0!==o&&o,c=r.absolute,u=void 0!==c&&c;if(!t)return t;if(t.startsWith("#"))return t;if(Object(a.b)(t))return t;if(l)return n+t;var s=t.startsWith(n)?t:n+t.replace(/^\//,"");return u?e+s:s}(r,t,e,n)}}}function o(e,n){return void 0===n&&(n={}),(0,r().withBaseUrl)(e,n)}},160:function(e,n,t){"use strict";function i(e){return!0===/^(\w*:|\/\/)/.test(e)}function a(e){return void 0!==e&&!i(e)}t.d(n,"b",(function(){return i})),t.d(n,"a",(function(){return a}))},83:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return u})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return b}));var i,a=t(3),r=t(7),o=(t(0),t(158)),l=t(159),c={id:"ios",title:"Building an iOS Plugin"},u={unversionedId:"tutorial/ios",id:"tutorial/ios",isDocsHomePage:!1,title:"Building an iOS Plugin",description:"For the purpose of the tutorial, we will assume you already have an existing iOS application in",source:"@site/../docs/tutorial/ios.mdx",slug:"/tutorial/ios",permalink:"/docs/tutorial/ios",editUrl:"https://github.com/facebook/flipper/blob/master/website/../docs/tutorial/ios.mdx",version:"current",sidebar:"extending",previous:{title:"Intro",permalink:"/docs/tutorial/intro"},next:{title:"Building an Android Plugin",permalink:"/docs/tutorial/android"}},s=[{value:"Creating a Plugin",id:"creating-a-plugin",children:[]},{value:"Registering your Plugin",id:"registering-your-plugin",children:[]},{value:"What next",id:"what-next",children:[]}],p=(i="FbInternalOnly",function(e){return console.warn("Component "+i+" was not imported, exported, or provided by MDXProvider as global scope"),Object(o.b)("div",e)}),d={toc:s};function b(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},d,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("img",{alt:"iOS Tutorial App",src:Object(l.a)("img/ios-tutorial-app.png")}),Object(o.b)("p",null,"For the purpose of the tutorial, we will assume you already have an existing iOS application in\nwhich you have a feed or list of items. As the Flipper team, we obviously concern ourselves mostly\nwith sea mammals, so this is what our app displays. The actual display logic is not what's interesting\nhere, but how we can make this data available in our Flipper desktop app."),Object(o.b)("p",null,"You can find the source code of the project ",Object(o.b)("a",{parentName:"p",href:"https://github.com/facebook/flipper/tree/c55bebd1be545c63dde93e143dd5c341dc2fd20b/iOS/Tutorial/Tutorial"},"on GitHub"),"."),Object(o.b)("h2",{id:"creating-a-plugin"},"Creating a Plugin"),Object(o.b)(p,{mdxType:"FbInternalOnly"},Object(o.b)("div",{class:"warning"},"[FB-Only] Depending the options selected during scaffolding (see intro), some of the following code might already have been generated by `scarf`.")),Object(o.b)("p",null,"On iOS, a Flipper plugin is a class that implements the\n",Object(o.b)("a",{parentName:"p",href:"https://github.com/facebook/flipper/blob/master/iOS/FlipperKit/FlipperPlugin.h"},Object(o.b)("inlineCode",{parentName:"a"},"FlipperPlugin")),"\ninterface."),Object(o.b)("p",null,"The interface is rather small and only comprises four methods:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"(NSString *)identifier"),": Specify a unique string so the JavaScript side knows where to talk to. This must match the name attribute in the ",Object(o.b)("inlineCode",{parentName:"li"},"package.json")," we will look into later in this tutorial."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"(void)didConnect:(id<FlipperConnection>)connection"),": This method is called when the desktop client connects and is ready to receive or send data."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"(void)didDisconnect"),": We're sure you can figure this one out."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"(BOOL)runInBackground"),": Unless this is true, only the currently selected plugin in the Flipper UI can communicate with the device. Its an optional method which you can override. Default value used is ",Object(o.b)("inlineCode",{parentName:"li"},"false"),".")),Object(o.b)("p",null,"Let's implement these methods for our sealife app:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-swift"},'import Foundation\nimport FlipperKit\n\nclass SeaMammalsPlugin: NSObject, FlipperPlugin {\n  var connection: FlipperConnection? = nil\n  let mammals: [MarineMammal]\n\n  init(_ marineMammals: [MarineMammal]) {\n      mammals = marineMammals\n  }\n\n  func identifier() -> String! {\n    return "sea-mammals"\n  }\n\n  func didConnect(_ connection: FlipperConnection!) {\n    self.connection = connection\n    for (index, mammal) in mammals.enumerated() {\n      connection.send("newRow", withParams: ["id": index, "title": mammal.name, "url": mammal.image.absoluteString])\n    }\n  }\n\n  func didDisconnect() {\n    connection = nil;\n  }\n}\n')),Object(o.b)("p",null,"The two interesting bits here are ",Object(o.b)("inlineCode",{parentName:"p"},"didConnect")," and ",Object(o.b)("inlineCode",{parentName:"p"},"connection.send"),". ",Object(o.b)("inlineCode",{parentName:"p"},"connection.send"),' sends a message\nto the desktop app and is identified with the name "newRow".'),Object(o.b)("p",null,"For our sample app, we're dealing with a static data source. However, in real\nlife, you will likely dynamically receive new data as the user interacts with\nthe app. So while we just send all the data we have at once in ",Object(o.b)("inlineCode",{parentName:"p"},"didConnect"),",\nyou would normally set up a listener here to instead call ",Object(o.b)("inlineCode",{parentName:"p"},'connection.send("newRow", params)')," as new data\narrives. ",Object(o.b)("inlineCode",{parentName:"p"},"params")," are nothing but a dictionary which contains the data which you want to send over the wire to the desktop app."),Object(o.b)("h2",{id:"registering-your-plugin"},"Registering your Plugin"),Object(o.b)("p",null,"Now all you need to do is let Flipper know about your new plugin. You do this\nby calling ",Object(o.b)("inlineCode",{parentName:"p"},"add")," on your ",Object(o.b)("inlineCode",{parentName:"p"},"FlipperClient"),", which is normally created\nat application startup."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-swift"},"let client = FlipperClient.shared()\n// Add all sorts of other amazing plugins here ...\nclient?.add(SeaMammalsPlugin(MarineMammal.defaultList))\nclient?.start()\n")),Object(o.b)("h2",{id:"what-next"},"What next"),Object(o.b)("p",null,'When starting your application now, Flipper will tell the desktop application\nabout the plugin it supports, including "sea-mammals" and will look for a\ncorresponding JavaScript plugin by that name. Before building it\'s JavaScript counterpart, first lets build a Flipper Plugin in Android.'))}b.isMDXComponent=!0}}]);