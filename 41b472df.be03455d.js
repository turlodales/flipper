(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{142:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return m}));var r=t(0),i=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=i.a.createContext({}),p=function(e){var n=i.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=p(e.components);return i.a.createElement(s.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},d=i.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(t),d=r,m=u["".concat(o,".").concat(d)]||u[d]||b[d]||a;return t?i.a.createElement(m,c(c({ref:n},s),{},{components:t})):i.a.createElement(m,c({ref:n},s))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var s=2;s<a;s++)o[s]=t[s];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},147:function(e,n,t){"use strict";function r(e){var n,t,i="";if("string"==typeof e||"number"==typeof e)i+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=r(e[n]))&&(i&&(i+=" "),i+=t);else for(n in e)e[n]&&(i&&(i+=" "),i+=n);return i}n.a=function(){for(var e,n,t=0,i="";t<arguments.length;)(e=arguments[t++])&&(n=r(e))&&(i&&(i+=" "),i+=n);return i}},149:function(e,n,t){"use strict";var r=t(0),i=t(150);n.a=function(){var e=Object(r.useContext)(i.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},150:function(e,n,t){"use strict";var r=t(0),i=Object(r.createContext)(void 0);n.a=i},152:function(e,n,t){"use strict";var r=t(0),i=t.n(r),a=t(149),o=t(147),c=t(55),l=t.n(c),s=37,p=39;n.a=function(e){var n=e.lazy,t=e.block,c=e.children,u=e.defaultValue,b=e.values,d=e.groupId,m=e.className,f=Object(a.a)(),O=f.tabGroupChoices,g=f.setTabGroupChoices,j=Object(r.useState)(u),y=j[0],h=j[1];if(null!=d){var v=O[d];null!=v&&v!==y&&b.some((function(e){return e.value===v}))&&h(v)}var k=function(e){h(e),null!=d&&g(d,e)},w=[];return i.a.createElement("div",null,i.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(o.a)("tabs",{"tabs--block":t},m)},b.map((function(e){var n=e.value,t=e.label;return i.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":y===n,className:Object(o.a)("tabs__item",l.a.tabItem,{"tabs__item--active":y===n}),key:n,ref:function(e){return w.push(e)},onKeyDown:function(e){!function(e,n,t){switch(t.keyCode){case p:!function(e,n){var t=e.indexOf(n)+1;e[t]?e[t].focus():e[0].focus()}(e,n);break;case s:!function(e,n){var t=e.indexOf(n)-1;e[t]?e[t].focus():e[e.length-1].focus()}(e,n)}}(w,e.target,e)},onFocus:function(){return k(n)},onClick:function(){k(n)}},t)}))),n?Object(r.cloneElement)(c.filter((function(e){return e.props.value===y}))[0],{className:"margin-vert--md"}):i.a.createElement("div",{className:"margin-vert--md"},c.map((function(e,n){return Object(r.cloneElement)(e,{key:n,hidden:e.props.value!==y})}))))}},153:function(e,n,t){"use strict";var r=t(3),i=t(0),a=t.n(i);n.a=function(e){var n=e.children,t=e.hidden,i=e.className;return a.a.createElement("div",Object(r.a)({role:"tabpanel"},{hidden:t,className:i}),n)}},89:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return s})),t.d(n,"rightToc",(function(){return p})),t.d(n,"default",(function(){return g}));var r=t(3),i=t(7),a=(t(0),t(142)),o=t(152),c=t(153),l={id:"testing",title:"Testing"},s={unversionedId:"extending/testing",id:"extending/testing",isDocsHomePage:!1,title:"Testing",description:"Developer tools are only used if they work. We have built APIs to test plugins.",source:"@site/../docs/extending/testing.mdx",slug:"/extending/testing",permalink:"/docs/extending/testing",editUrl:"https://github.com/facebook/flipper/blob/master/website/../docs/extending/testing.mdx",version:"current",sidebar:"extending",previous:{title:"Plugin structure",permalink:"/docs/extending/desktop-plugin-structure"},next:{title:"Debugging",permalink:"/docs/extending/debugging"}},p=[{value:"Writing tests",id:"writing-tests",children:[]},{value:"Desktop plugins",id:"desktop-plugins",children:[]},{value:"Client plugins",id:"client-plugins",children:[]},{value:"Running (Flipper) tests",id:"running-flipper-tests",children:[{value:"Flipper Desktop",id:"flipper-desktop",children:[]},{value:"Flipper SDK",id:"flipper-sdk",children:[]},{value:"iOS",id:"ios",children:[]},{value:"React Native",id:"react-native",children:[]}]}],u=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(a.b)("div",n)}},b=u("OssOnly"),d=u("FbAndroidTesting"),m=u("FbIosTesting"),f=u("FbInternalOnly"),O={rightToc:p};function g(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},O,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Developer tools are only used if they work. We have built APIs to test plugins."),Object(a.b)("h2",{id:"writing-tests"},"Writing tests"),Object(a.b)("h2",{id:"desktop-plugins"},"Desktop plugins"),Object(a.b)("p",null,"Flipper uses ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://jestjs.io/"}),"Jest")," as unit testing framework."),Object(a.b)("p",null,"Writing unit tests for Flipper Desktop plugins is covered in detail in the ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"../../docs/tutorial/js-custom#testing-plugin-logic"}),"tutorial"),". "),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"flipper-plugin")," package provide several ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"../../docs/extending/flipper-plugin#testutils"}),"test utilities")," to make testing more convenient. "),Object(a.b)("h2",{id:"client-plugins"},"Client plugins"),Object(a.b)(o.a,{defaultValue:"android",values:[{label:"Android",value:"android"},{label:"iOS",value:"ios"}],mdxType:"Tabs"},Object(a.b)(c.a,{value:"android",mdxType:"TabItem"},Object(a.b)(b,{mdxType:"OssOnly"},"Start by creating your first test file in this directory `MyFlipperPluginTest.java`. In the test method body we create our plugin which we want to test as well as a `FlipperConnectionMock`. In this contrived example we simply assert that our plugin's connected status is what we expect.",Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"@RunWith(RobolectricTestRunner.class)\npublic class MyFlipperPluginTest {\n\n  @Test\n  public void myTest() {\n    final MyFlipperPlugin plugin = new MyFlipperPlugin();\n    final FlipperConnectionMock connection = new FlipperConnectionMock();\n\n    plugin.onConnect(connection);\n    assertThat(plugin.connected(), equalTo(true));\n  }\n}\n")),Object(a.b)("p",null,"There are two mock classes that are used to construct tests ",Object(a.b)("inlineCode",{parentName:"p"},"FlipperConnectionMock")," and ",Object(a.b)("inlineCode",{parentName:"p"},"FlipperResponderMock"),". Together these can be used to write very powerful tests to verify the end to end behavior of your plugin. For example we can test if for a given incoming message our plugin responds as we expect."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'@Test\npublic void myTest() {\n  final MyFlipperPlugin plugin = new MyFlipperPlugin();\n  final FlipperConnectionMock connection = new FlipperConnectionMock();\n  final FlipperResponderMock responder = new FlipperResponderMock();\n\n  plugin.onConnect(connection);\n\n  final FlipperObject params = new FlipperObject.Builder()\n      .put("phrase", "flipper")\n      .build();\n  connection.receivers.get("myMethod").onReceive(params, responder);\n\n  assertThat(responder.successes, hasItem(\n      new FlipperObject.Builder()\n          .put("phrase", "ranos")\n          .build()));\n}\n'))),Object(a.b)(d,{mdxType:"FbAndroidTesting"})),Object(a.b)(c.a,{value:"ios",mdxType:"TabItem"},Object(a.b)(b,{mdxType:"OssOnly"},Object(a.b)("p",null,"Start by creating your first test file in this directory ",Object(a.b)("inlineCode",{parentName:"p"},"MyFlipperPluginTests.cpp")," and import the testing utilities from ",Object(a.b)("inlineCode",{parentName:"p"},"fbsource//xplat/sonar/xplat:FlipperTestLib"),". These utilities mock out core pieces of the communication channel so that you can test your plugin in isolation."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"#include <MyFlipperPlugin/MyFlipperPlugin.h>\n#include <FlipperTestLib/FlipperConnectionMock.h>\n#include <FlipperTestLib/FlipperResponderMock.h>\n\n#include <folly/json.h>\n#include <gtest/gtest.h>\n\nnamespace facebook {\nnamespace flipper {\nnamespace test {\n\nTEST(MyFlipperPluginTests, testDummy) {\n  EXPECT_EQ(1 + 1, 2);\n}\n\n} // namespace test\n} // namespace flipper\n} // namespace facebook\n")),Object(a.b)("p",null,"Here is a simple test using these mock utilities to create a plugin, send some data, and assert that the result is as expected."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),'TEST(MyFlipperPluginTests, testDummy) {\n  std::vector<folly::dynamic> successfulResponses;\n  auto responder = std::make_unique<FlipperResponderMock>(&successfulResponses);\n  auto conn = std::make_shared<FlipperConnectionMock>();\n\n  MyFlipperPlugin plugin;\n  plugin.didConnect(conn);\n\n  folly::dynamic message = folly::dynamic::object("param1", "hello");\n  folly::dynamic expectedResponse = folly::dynamic::object("response", "Hi there");\n\n  auto receiver = conn->receivers_["someMethod"];\n  receiver(message, std::move(responder));\n\n  EXPECT_EQ(successfulResponses.size(), 1);\n  EXPECT_EQ(successfulResponses.back(), expectedResponse);\n}\n'))),Object(a.b)(m,{mdxType:"FbIosTesting"}))),Object(a.b)("h2",{id:"running-flipper-tests"},"Running (Flipper) tests"),Object(a.b)("h3",{id:"flipper-desktop"},"Flipper Desktop"),Object(a.b)(b,{mdxType:"OssOnly"},Object(a.b)("p",null,"Run ",Object(a.b)("inlineCode",{parentName:"p"},"yarn jest")," or ",Object(a.b)("inlineCode",{parentName:"p"},"yarn jest --watch")," in the ",Object(a.b)("inlineCode",{parentName:"p"},"desktop")," directory of your Flipper checkout.")),Object(a.b)(f,{mdxType:"FbInternalOnly"},Object(a.b)("p",null,"Run ",Object(a.b)("inlineCode",{parentName:"p"},"yarn jest")," or ",Object(a.b)("inlineCode",{parentName:"p"},"yarn jest --watch")," in ",Object(a.b)("inlineCode",{parentName:"p"},"~/fbsource/xplat/sonar/desktop"))),Object(a.b)("h3",{id:"flipper-sdk"},"Flipper SDK"),Object(a.b)("h4",{id:"android-java"},"Android (Java)"),Object(a.b)(b,{mdxType:"OssOnly"},Object(a.b)("h5",{id:"gradle"},"Gradle:"),Object(a.b)("p",null,"In the root directory of the checkout:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"./gradlew android:test\n"))),Object(a.b)(f,{mdxType:"FbInternalOnly"},Object(a.b)("h5",{id:"gradle-1"},"Gradle:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"cd fbsource/xplat/sonar\n./gradlew android:test\n")),Object(a.b)("h5",{id:"buck"},"Buck:"),Object(a.b)("p",null,"I don't know of a way to run them locally \ud83d\ude1e Make a change and submit a diff."),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"buck test ...")," should work, but doesn't seem to when run in xplat on mac but they do work on mobile on demand, if you use @mode/server."),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"Debugging note: They do work if you copy the files and BUCK file to")," ",Object(a.b)("inlineCode",{parentName:"p"},"fbandroid/javatests")," ",Object(a.b)("em",{parentName:"p"},"and change the rule from")," ",Object(a.b)("inlineCode",{parentName:"p"},"sonar_android_test")," ",Object(a.b)("em",{parentName:"p"},"to")," ",Object(a.b)("inlineCode",{parentName:"p"},"robolectric3_test"))),Object(a.b)(f,{mdxType:"FbInternalOnly"},Object(a.b)("h3",{id:"ios"},"iOS"),Object(a.b)("p",null,"Focus on the plugins, or flipper code you want but with the --with-tests param."),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"arc focus ... --with-tests")),Object(a.b)("p",null,"Then click the <-> icon  in xcode and you can run them there.")),Object(a.b)("h3",{id:"react-native"},"React Native"),Object(a.b)("p",null,"See ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"testing-rn"}),"testing React Native"),"."))}g.isMDXComponent=!0}}]);